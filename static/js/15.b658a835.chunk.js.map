{"version":3,"sources":["utils/API.js","components/PokemonsPageAll/ListView.jsx","components/PokemonsPageAll/CatalogView.jsx","components/PokemonsPageAll/index.jsx"],"names":["getRandomPokemon","a","amount","randomNumber","Math","floor","random","URL","axios","get","then","response","randomPokemons","data","store","dispatch","type","catch","error","console","log","setDelailedPageData","event","isSearch","pokemon_id","currentTarget","closest","dataset","id","page","sprites","other","versions","ImageContainer","lazy","ListView","props","pokemonDataArray","useState","pokemons","setPokemons","pokemonCount","setPokemonCount","useEffect","fetchPokemons","arr","i","push","length","className","pageStart","dataLength","next","hasMore","loader","endMessage","map","index","key","to","name","data-pokemon_id","onClick","Paper","elevation","fallback","src","placeholderBase64","image","alt","url","imageHQ","cn","CatalogView","Fragment","loading","ConnectedPokemonsPageAll","connect","pokemonsArr","viewTypeIsCatalog","setViewTypeIsCatalog"],"mappings":"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","file":"static/js/15.b658a835.chunk.js","sourcesContent":["import store from \"@Store\";\nimport axios from \"axios\";\n\nexport let getRandomPokemon = async (amount = 806) => {\n  const randomNumber = Math.floor(1 + Math.random() * amount);\n  const URL = `https://pokeapi.co/api/v2/pokemon/${randomNumber}/`;\n\n  await axios\n    .get(URL)\n    .then(async (response) => {\n      let randomPokemons = response.data;\n      await store.dispatch({ type: \"ADD_RANDOM_POKEMON\", randomPokemons });\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const setDelailedPageData = async (event, isSearch) => {\n  let pokemon_id;\n\n  if (typeof event === \"number\") {\n    pokemon_id = event;\n  } else {\n    if (isSearch === true) {\n      pokemon_id = event.currentTarget.closest(\"LI\").dataset.id;\n    } else {\n      pokemon_id = event.currentTarget.dataset.pokemon_id;\n    }\n  }\n\n  const URL = `https://pokeapi.co/api/v2/pokemon/${pokemon_id}/`;\n  await axios.get(URL).then(async (response) => {\n    const page = response.data;\n\n    delete page.sprites.other;\n    delete page.sprites.versions;\n\n    await store.dispatch({ type: \"SET_DETAILS_PAGE\", page });\n  });\n};\n","import React, { lazy, Suspense, useState, useEffect } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport { setDelailedPageData } from \"@APIutils\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport \"./styles/style.scss\";\n\nconst ImageContainer = lazy(() => import(\"@ImageContainer\"));\n\nconst ListView = (props) => {\n  const { pokemonDataArray } = props;\n\n  const [pokemons, setPokemons] = useState([]);\n  const [pokemonCount, setPokemonCount] = useState(0);\n\n  useEffect(() => {\n    fetchPokemons();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchPokemons = () => {\n    const howMuchToDownload = 70;\n    let arr = [];\n\n    for (let i = pokemonCount; i <= pokemonCount + howMuchToDownload; i++) {\n      arr.push(pokemonDataArray[i]);\n    }\n    setPokemons((pokemons) => [...pokemons, ...arr]);\n    setPokemonCount(pokemons.length + howMuchToDownload);\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <InfiniteScroll\n          pageStart={1}\n          dataLength={pokemons.length}\n          next={fetchPokemons}\n          hasMore={pokemons.length < 758}\n          loader={<h4>Loading...</h4>}\n          className=\"allPokemonsWrapper\"\n          endMessage={<p className=\"pokemon-end\">No more pokemons :(</p>}\n        >\n          {pokemons.map((index, key) => (\n            <NavLink\n              to={`/detailedPage/pokemon/${index?.name}`}\n              data-pokemon_id={index?.id}\n              onClick={setDelailedPageData}\n              key={index + Math.floor(1 + Math.random() * 9999999999)}\n            >\n              <Paper elevation={3} className=\"smallPokemonCard\">\n                <div className=\"pokemonLogo\">\n                  <Suspense\n                    fallback={\n                      <img\n                        src={index?.placeholderBase64 || index?.image}\n                        className=\"placeholderBase64\"\n                        alt=\"placeholderBase64\"\n                      />\n                    }\n                  >\n                    <ImageContainer\n                      url={index?.imageHQ || index?.image}\n                      cn=\"pokemonImageCard\"\n                    />\n                  </Suspense>\n                </div>\n                <div className=\"pokemonName\">{index?.name}</div>\n              </Paper>\n            </NavLink>\n          ))}\n        </InfiniteScroll>\n      </section>\n    </>\n  );\n};\n\nexport default ListView;\n\nListView.propTypes = {\n  pokemonDataArray: PropTypes.array,\n};\n","import React, { Suspense, lazy } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport { setDelailedPageData } from \"@APIutils\";\n\nimport \"react-tippy/dist/tippy.css\";\nimport \"./styles/style.scss\";\n\nconst ImageContainer = lazy(() => import(\"@ImageContainer\"));\n\nconst CatalogView = (props) => {\n  const { pokemonDataArray } = props;\n\n  return (\n    <div className=\"wrapper\">\n      {pokemonDataArray.map((index, key) => (\n        <React.Fragment key={key}>\n          <NavLink\n            to={`/detailedPage/pokemon/${index?.name}`}\n            data-pokemon_id={index?.id}\n            onClick={setDelailedPageData}\n            key={key}\n          >\n            <Suspense\n              fallback={\n                <img\n                  loading=\"lazy\"\n                  src={index?.placeholderBase64 || index?.image}\n                  className=\"placeholderBase64\"\n                  alt=\"placeholderBase64\"\n                />\n              }\n            >\n              <ImageContainer url={index?.image} cn=\"pokemonImageCard\" />\n            </Suspense>\n          </NavLink>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default CatalogView;\n\nCatalogView.propTypes = {\n  pokemonDataArray: PropTypes.array,\n};\n","import React, { useState } from \"react\";\nimport { Provider, connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport store from \"@Store\";\n\nimport ListView from \"@ListView\";\nimport CatalogView from \"@CatalogView\";\n\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport BlurOnOutlinedIcon from \"@material-ui/icons/BlurOnOutlined\";\n\nconst PokemonsPageAll = (props) => {\n  const { pokemonDataArray } = props;\n  const [viewTypeIsCatalog, setViewTypeIsCatalog] = useState(false);\n\n  return (\n    <>\n      <div className=\"viewType\">\n        <div className=\"viewTypeInner\">\n          <div\n            className=\"innerBlock\"\n            onClick={() => setViewTypeIsCatalog(!viewTypeIsCatalog)}\n          >\n            {!viewTypeIsCatalog ? (\n              <>\n                <span>List view:</span>\n                <span className=\"separator\">|</span>\n                <div className=\"list\">\n                  <BlurOnOutlinedIcon />\n                </div>\n              </>\n            ) : (\n              <>\n                <span>Catalog view:</span>\n                <span className=\"separator\">|</span>\n\n                <div className=\"catalog\">\n                  <AppsIcon />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {!viewTypeIsCatalog ? (\n        <ListView pokemonDataArray={pokemonDataArray} />\n      ) : (\n        <CatalogView pokemonDataArray={pokemonDataArray} />\n      )}\n    </>\n  );\n};\n\nconst ConnectedPokemonsPageAll = connect((store) => {\n  return {\n    pokemonDataArray: store.pokemonsArr,\n  };\n})(PokemonsPageAll);\n\nexport default (props) => (\n  <Provider store={store}>\n    <ConnectedPokemonsPageAll {...props} />\n  </Provider>\n);\n\nPokemonsPageAll.propTypes = {\n  pokemonDataArray: PropTypes.array,\n};\n"],"sourceRoot":""}