{"version":3,"sources":["components/PokemonPageAll/views/ListView.tsx","components/PokemonPageAll/views/CatalogView.tsx","components/PokemonPageAll/index.tsx","utils/ErrorBoundary.tsx","components/ImageContainer/ImageContainer.tsx"],"names":["ScrollStyled","styled","InfiniteScroll","Logo","div","SmallCard","Paper","End","p","Name","ListView","pokemonArr","useState","pokemon","setPokemon","pokemonCount","setPokemonCount","useEffect","fetchPokemon","arr","i","push","length","dataLength","next","hasMore","loader","endMessage","map","to","name","elevation","ImageContainer","url","imageHQ","image","cn","fallback","placeholderBase64","src","className","alt","id","Wrapper","CatalogView","index","key","Fragment","loading","Container","section","ViewType","Title","span","Separator","Icon","ViewTypeInner","InnerBlock","PokemonPageAll","useSelector","state","viewTypeIsCatalog","setViewTypeIsCatalog","onClick","ErrorBoundary","error","errorInfo","this","setState","ErrorType","Error","props","children","React","PureComponent","ready","setReady","img","Image","onload","style","display"],"mappings":"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","file":"static/js/10.ef80b2c5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { NavLink } from 'react-router-dom';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport { PokesTypes } from 'types/index';\nimport styled from 'styled-components/macro';\nimport ImageContainer from 'components/ImageContainer/ImageContainer';\n\ntype Props = {\n  pokemonArr: PokesTypes[];\n};\n\nconst ListView: React.FC<Props> = ({ pokemonArr = [] }: Props) => {\n  const [pokemon, setPokemon] = useState<PokesTypes[]>([]);\n  const [pokemonCount, setPokemonCount] = useState<number>(0);\n\n  useEffect(() => {\n    fetchPokemon();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchPokemon = () => {\n    const howMuchToDownload = 25;\n    let arr: PokesTypes[] = [];\n\n    for (let i = pokemonCount; i <= pokemonCount + howMuchToDownload; i++) {\n      pokemonCount <= 713 && arr.push(pokemonArr[i]);\n    }\n    setPokemon((pokemon: PokesTypes[]) => [...pokemon, ...arr]);\n    setPokemonCount(pokemon.length + 1 + howMuchToDownload);\n  };\n\n  const fallback = (placeholderBase64: string) => {\n    return <img src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />;\n  };\n\n  return (\n    <>\n      <ScrollStyled\n        dataLength={pokemon.length}\n        next={fetchPokemon}\n        hasMore={pokemonCount <= pokemon.length}\n        loader={<h4>Loading...</h4>}\n        endMessage={<End>Don't have more pokemon :(</End>}\n      >\n        {pokemon.map((pokemon: PokesTypes) => (\n          <NavLink to={`/detailedPage/pokemon/${pokemon.name}`} key={pokemon.id}>\n            <SmallCard elevation={3}>\n              <Logo>\n                <ImageContainer\n                  url={pokemon.imageHQ || pokemon.image}\n                  cn={'pokemonImageCard deBlur'}\n                  fallback={fallback(pokemon.placeholderBase64)}\n                />\n              </Logo>\n              <Name>{pokemon?.name}</Name>\n            </SmallCard>\n          </NavLink>\n        ))}\n      </ScrollStyled>\n    </>\n  );\n};\n\nconst ScrollStyled = styled(InfiniteScroll)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  margin-top: 50px;\n  margin-bottom: 100px;\n  min-height: 100vh;\n`;\n\nconst Logo = styled.div`\n  width: 100%;\n  min-height: 160px;\n  text-align: center;\n\n  img,\n  svg {\n    width: 100%;\n    height: auto;\n    object-fit: cover;\n  }\n`;\n\nconst SmallCard = styled(Paper)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  margin: 10px;\n  border-radius: 10px;\n  background: #4c4cffd9 !important;\n  cursor: pointer;\n  width: 160px;\n  min-height: 240px;\n  object-fit: cover;\n\n  &:hover {\n    transform: scale(1.02);\n  }\n`;\n\nconst End = styled.p`\n  margin-top: 40px;\n  width: 100%;\n  text-align: center;\n  font-size: 26px;\n`;\n\nconst Name = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  color: black;\n  font-size: 24px;\n`;\n\nexport default ListView;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport 'react-tippy/dist/tippy.css';\n\nimport { PokesTypes } from 'types/index';\n\nimport styled from 'styled-components/macro';\nimport ImageContainer from 'components/ImageContainer/ImageContainer';\n\ntype Props = {\n  pokemonArr: PokesTypes[];\n};\n\nconst CatalogView: React.FC<Props> = ({ pokemonArr = [] }: Props) => {\n  const fallback = (placeholderBase64: string) => {\n    return (\n      <>\n        <img loading=\"lazy\" src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />\n      </>\n    );\n  };\n\n  return (\n    <Wrapper>\n      {pokemonArr.map((index, key) => (\n        <React.Fragment key={key}>\n          <NavLink to={`/detailedPage/pokemon/${index?.name}`} key={key}>\n            <ImageContainer url={index?.image} cn=\"deBlur\" fallback={fallback(index?.placeholderBase64)} />\n          </NavLink>\n        </React.Fragment>\n      ))}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  margin-top: 50px;\n  margin-bottom: 100px;\n  width: 100%;\n  max-width: 100vw;\n\n  a {\n    box-shadow: 0.5px 0 0 0 red, 0 0.5px 0 0 red, 0.5px 0.5px 0 0 red, 0.5px 0 0 0 red inset, 0 0.5px 0 0 red inset;\n    overflow: hidden;\n  }\n\n  img {\n    width: calc(100vw / 40);\n    min-width: 65px;\n    max-width: 65px;\n    height: calc(100vh / 20);\n    min-height: 65px;\n    max-height: 65px;\n  }\n\n  div,\n  img {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-width: 100px;\n    object-fit: cover;\n  }\n`;\n\nexport default CatalogView;\n","/* eslint-disable import/no-anonymous-default-export */\nimport React, { useState } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport ListView from './views/ListView';\nimport CatalogView from './views/CatalogView';\n\nimport AppsIcon from '@material-ui/icons/Apps';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\n\nimport { PokesTypes } from 'types/index';\n\nimport styled from 'styled-components/macro';\n\nconst PokemonPageAll: React.FC = () => {\n  const pokemonArr = useSelector((state: PokesTypes) => state.pokemonArr);\n\n  const [viewTypeIsCatalog, setViewTypeIsCatalog] = useState<boolean>(false);\n\n  return (\n    <Container>\n      <ViewType>\n        <ViewTypeInner>\n          <InnerBlock onClick={() => setViewTypeIsCatalog(!viewTypeIsCatalog)}>\n            <Title>{!viewTypeIsCatalog ? 'List view' : 'Catalog view'}</Title>\n            <Separator>|</Separator>\n            <Icon>{!viewTypeIsCatalog ? <BlurOnOutlinedIcon /> : <AppsIcon />}</Icon>\n          </InnerBlock>\n        </ViewTypeInner>\n      </ViewType>\n\n      {!viewTypeIsCatalog ? <ListView pokemonArr={pokemonArr} /> : <CatalogView pokemonArr={pokemonArr} />}\n    </Container>\n  );\n};\n\nconst Container = styled.section`\n  max-width: 900px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst ViewType = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 100px;\n  width: 100%;\n`;\n\nconst Title = styled.span`\n  font-size: 24px;\n  margin-right: 5px;\n`;\n\nconst Separator = styled.span`\n  margin-top: 2px;\n  margin-right: 10px;\n  font-size: 24px;\n`;\n\nconst Icon = styled.div`\n  margin-top: 4px;\n  cursor: pointer;\n  width: 20px;\n`;\n\nconst ViewTypeInner = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  width: 90%;\n`;\n\nconst InnerBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n  padding: 5px 15px 5px 15px;\n\n  &:hover {\n    box-shadow: 5px 3px 11px 1px #000000;\n  }\n\n  &:active {\n    box-shadow: 0 1px 0 #00823f;\n  }\n`;\n\nexport default PokemonPageAll;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nexport default class ErrorBoundary extends React.PureComponent {\n  state = { error: null };\n\n  componentDidCatch(error: {}, errorInfo: any) {\n    this.setState({ error });\n    errorInfo.ErrorType = 'ReactError';\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <Error>\n          <Title>Ooops...</Title>\n        </Error>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst Error = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 14px;\n  color: #ff3527;\n`;\n","import { useEffect, useState } from 'react';\nimport ErrorBoundary from 'utils/ErrorBoundary';\n\nimport { JSXElement } from 'types/index';\n\ninterface ImageContainerProps {\n  url: string;\n  cn?: string;\n  fallback?: JSXElement | Function;\n}\n\nconst ImageContainer = ({ url, cn, fallback }: ImageContainerProps) => {\n  const [ready, setReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => setReady(true);\n    img.src = url;\n\n    return () => {\n      setReady(false);\n    };\n  }, [url]);\n\n  return (\n    <>\n      <ErrorBoundary>\n        {!ready && <>{typeof fallback === 'function' ? fallback() : fallback}</>}\n\n        <img src={url} alt={cn} className={cn} style={{ display: ready ? 'block' : 'none' }} loading=\"lazy\" />\n      </ErrorBoundary>\n    </>\n  );\n};\n\nexport default ImageContainer;\n"],"sourceRoot":""}