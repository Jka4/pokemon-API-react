{"version":3,"sources":["components/PokemonsPageAll/ListView.tsx","components/PokemonsPageAll/CatalogView.tsx","components/PokemonsPageAll/index.tsx"],"names":["ImageContainer","lazy","ListView","pokemonDataArray","useState","pokemons","setPokemons","pokemonCount","setPokemonCount","useEffect","fetchPokemons","arr","i","push","length","className","dataLength","next","hasMore","loader","endMessage","map","pokemon","to","name","data-pokemon_id","id","Paper","elevation","url","imageHQ","image","cn","fallback","placeholderBase64","src","alt","CatalogView","index","key","Fragment","loading","ConnectedPokemonsPageAll","connect","store","pokemonsArr","viewTypeIsCatalog","setViewTypeIsCatalog","onClick","props"],"mappings":"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","file":"static/js/14.76f2ad23.chunk.js","sourcesContent":["import React, { lazy, useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { NavLink } from 'react-router-dom';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport './styles/style.scss';\n\nconst ImageContainer = lazy(() => import('components/ImageContainer/ImageContainer'));\n\ntype Props = {\n  pokemonDataArray: PokemonsType[];\n};\n\ntype PokemonsType = {\n  chain: {\n    species_name: string;\n  }[];\n  id: 0;\n  image: string;\n  imageHQ: string;\n  name: string;\n  placeholderBase64: string;\n  weight: number;\n};\n\nconst ListView: React.FC<Props> = ({ pokemonDataArray = [] }: Props) => {\n  const [pokemons, setPokemons] = useState<any[]>([]);\n  const [pokemonCount, setPokemonCount] = useState<number>(0);\n\n  useEffect(() => {\n    fetchPokemons();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchPokemons = () => {\n    const howMuchToDownload = 20;\n    let arr: any[] = [];\n\n    for (let i = pokemonCount; i <= pokemonCount + howMuchToDownload; i++) {\n      arr.push(pokemonDataArray[i]);\n    }\n    setPokemons((pokemons: any[]) => [...pokemons, ...arr]);\n    setPokemonCount(pokemons.length + 1 + howMuchToDownload);\n  };\n\n  const fallback = (placeholderBase64: string) => {\n    return (\n      <>\n        <img src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <InfiniteScroll\n          dataLength={pokemons.length}\n          next={fetchPokemons}\n          hasMore={pokemons.length < 758}\n          loader={<h4>Loading...</h4>}\n          className=\"allPokemonsWrapper\"\n          endMessage={<p className=\"pokemon-end\">No more pokemons :(</p>}\n        >\n          {pokemons.map((pokemon: PokemonsType) => (\n            <NavLink to={`/detailedPage/pokemon/${pokemon.name}`} data-pokemon_id={pokemon.id} key={pokemon.id}>\n              <Paper elevation={3} className=\"smallPokemonCard\">\n                <div className=\"pokemonLogo\">\n                  <ImageContainer\n                    url={pokemon.imageHQ || pokemon.image}\n                    cn={'pokemonImageCard'}\n                    fallback={fallback(pokemon.placeholderBase64)}\n                  />\n                </div>\n                <div className=\"pokemonName\">{pokemon.name}</div>\n              </Paper>\n            </NavLink>\n          ))}\n        </InfiniteScroll>\n      </section>\n    </>\n  );\n};\n\nexport default ListView;\n","import React, { lazy } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport 'react-tippy/dist/tippy.css';\nimport './styles/style.scss';\n\nconst ImageContainer = lazy(() => import('components/ImageContainer/ImageContainer'));\n\ntype Props = {\n  pokemonDataArray: {\n    chain: {\n      species_name: string;\n    }[];\n    id: 0;\n    image: string;\n    imageHQ: string;\n    name: string;\n    placeholderBase64: string;\n    weight: number;\n  }[];\n};\n\nconst CatalogView: React.FC<Props> = ({ pokemonDataArray = [] }: Props) => {\n  const fallback = (placeholderBase64: string) => {\n    return (\n      <>\n        <img loading=\"lazy\" src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      {pokemonDataArray.map((index, key) => (\n        <React.Fragment key={key}>\n          <NavLink to={`/detailedPage/pokemon/${index?.name}`} data-pokemon_id={index?.id} key={key}>\n            <ImageContainer url={index?.image} cn=\"pokemonImageCard\" fallback={fallback(index?.placeholderBase64)} />\n          </NavLink>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default CatalogView;\n","/* eslint-disable import/no-anonymous-default-export */\nimport React, { useState } from 'react';\nimport { Provider, connect } from 'react-redux';\n\nimport store from 'Store/store';\n\nimport ListView from './ListView';\nimport CatalogView from './CatalogView';\n\nimport AppsIcon from '@material-ui/icons/Apps';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\n\ntype PokemonsPageAllType = {\n  pokemonDataArray: {\n    chain: {\n      species_name: string;\n    }[];\n    id: 0;\n    image: string;\n    imageHQ: string;\n    name: string;\n    placeholderBase64: string;\n    weight: number;\n  }[];\n};\n\nconst PokemonsPageAll: React.FC<PokemonsPageAllType> = ({ pokemonDataArray = [] }: PokemonsPageAllType) => {\n  const [viewTypeIsCatalog, setViewTypeIsCatalog] = useState<boolean>(true);\n\n  return (\n    <>\n      <div className=\"viewType\">\n        <div className=\"viewTypeInner\">\n          <div className=\"innerBlock\" onClick={() => setViewTypeIsCatalog(!viewTypeIsCatalog)}>\n            {!viewTypeIsCatalog ? (\n              <>\n                <span>List view:</span>\n                <span className=\"separator\">|</span>\n                <div className=\"list\">\n                  <BlurOnOutlinedIcon />\n                </div>\n              </>\n            ) : (\n              <>\n                <span>Catalog view:</span>\n                <span className=\"separator\">|</span>\n                <div className=\"catalog\">\n                  <AppsIcon />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {!viewTypeIsCatalog ? (\n        <ListView pokemonDataArray={pokemonDataArray} />\n      ) : (\n        <CatalogView pokemonDataArray={pokemonDataArray} />\n      )}\n    </>\n  );\n};\n\nconst ConnectedPokemonsPageAll = connect((store: { pokemonsArr: any[] }) => {\n  return {\n    pokemonDataArray: store.pokemonsArr,\n  };\n})(PokemonsPageAll);\n\nexport default (props = {}) => (\n  <Provider store={store}>\n    <ConnectedPokemonsPageAll {...props} />\n  </Provider>\n);\n"],"sourceRoot":""}