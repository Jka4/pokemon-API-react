{"version":3,"sources":["components/PokemonPageAll/views/ListView.tsx","components/PokemonPageAll/views/CatalogView.tsx","components/PokemonPageAll/index.tsx"],"names":["ImageContainer","lazy","ListView","pokemonArr","useState","pokemon","setPokemon","pokemonCount","setPokemonCount","useEffect","fetchPokemon","arr","i","push","length","className","dataLength","next","hasMore","loader","endMessage","map","to","name","Paper","elevation","url","imageHQ","image","cn","fallback","placeholderBase64","src","alt","id","CatalogView","index","key","Fragment","loading","PokemonPageAll","useSelector","state","viewTypeIsCatalog","setViewTypeIsCatalog","onClick"],"mappings":"8MAQMA,EAAiBC,gBAAK,kBAAM,iCAkEnBC,EA5DmB,SAAC,GAAgC,IAAD,IAA7BC,kBAA6B,MAAhB,GAAgB,IAClCC,mBAAuB,IADW,mBACzDC,EADyD,KAChDC,EADgD,OAExBF,mBAAiB,GAFO,mBAEzDG,EAFyD,KAE3CC,EAF2C,KAIhEC,qBAAU,WACRC,MAGC,IAEH,IAAMA,EAAe,WAInB,IAHA,IACIC,EAAoB,GAEfC,EAAIL,EAAcK,GAAKL,EAHN,GAGwCK,IAChEL,GAAgB,KAAOI,EAAIE,KAAKV,EAAWS,IAE7CN,GAAW,SAACD,GAAD,4BAA+BA,GAAYM,MACtDH,EAAgBH,EAAQS,OAAS,EAPP,KAkB5B,OACE,mCACE,yBAASC,UAAU,OAAnB,SACE,cAAC,IAAD,CACEC,WAAYX,EAAQS,OACpBG,KAAMP,EACNQ,QAASX,GAAgBF,EAAQS,OACjCK,OAAQ,4CACRJ,UAAU,oBACVK,WAAY,mBAAGL,UAAU,cAAb,wCANd,SAQGV,EAAQgB,KAAI,SAAChB,GAAD,OACX,cAAC,IAAD,CAASiB,GAAE,gCAA2BjB,EAAQkB,MAA9C,SACE,eAACC,EAAA,EAAD,CAAOC,UAAW,EAAGV,UAAU,mBAA/B,UACE,qBAAKA,UAAU,cAAf,SACE,cAACf,EAAD,CACE0B,IAAKrB,EAAQsB,SAAWtB,EAAQuB,MAChCC,GAAI,0BACJC,UA1BAC,EA0BmB1B,EAAQ0B,kBAxBzC,mCACE,qBAAKC,IAAKD,EAAmBhB,UAAU,2BAA2BkB,IAAI,6BA0B9D,qBAAKlB,UAAU,cAAf,gBAA8BV,QAA9B,IAA8BA,OAA9B,EAA8BA,EAASkB,WATgBlB,EAAQ6B,IApB5D,IAACH,YC5Bd/B,G,OAAiBC,gBAAK,kBAAM,kCAgCnBkC,EA1BsB,SAAC,GAAgC,IAAD,IAA7BhC,kBAA6B,MAAhB,GAAgB,EASnE,OACE,qBAAKY,UAAU,UAAf,SACGZ,EAAWkB,KAAI,SAACe,EAAOC,GAAR,OACd,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,CAAShB,GAAE,uCAA2Bc,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAOb,MAA7C,SACE,cAAC,EAAD,CACEG,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAOR,MACZC,GAAG,0BACHC,UAhBMC,EAgBY,OAACK,QAAD,IAACA,OAAD,EAACA,EAAOL,kBAdlC,mCACE,qBAAKQ,QAAQ,OAAOP,IAAKD,EAAmBhB,UAAU,2BAA2BkB,IAAI,4BASzBI,IADvCA,GAXV,IAACN,Q,2CCuBLS,UAtBkB,WAC/B,IAAMrC,EAAasC,aAAY,SAACC,GAAD,OAAuBA,EAAMvC,cADvB,EAGaC,oBAAkB,GAH/B,mBAG9BuC,EAH8B,KAGXC,EAHW,KAKrC,OACE,qCACE,qBAAK7B,UAAU,WAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,aAAa8B,QAAS,kBAAMD,GAAsBD,IAAjE,UACE,+BAAQA,EAAmC,gBAAf,eAC5B,sBAAM5B,UAAU,YAAhB,eACA,qBAAKA,UAAU,eAAf,SAAgC4B,EAA6C,cAAC,IAAD,IAAzB,cAAC,IAAD,aAKxDA,EAA2D,cAAC,EAAD,CAAaxC,WAAYA,IAAhE,cAAC,EAAD,CAAUA,WAAYA","file":"static/js/14.4cf154e4.chunk.js","sourcesContent":["import React, { lazy, useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { NavLink } from 'react-router-dom';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport { PokesTypes } from 'types/index';\n\nconst ImageContainer = lazy(() => import('components/ImageContainer/ImageContainer'));\n\ntype Props = {\n  pokemonArr: PokesTypes[];\n};\n\nconst ListView: React.FC<Props> = ({ pokemonArr = [] }: Props) => {\n  const [pokemon, setPokemon] = useState<PokesTypes[]>([]);\n  const [pokemonCount, setPokemonCount] = useState<number>(0);\n\n  useEffect(() => {\n    fetchPokemon();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchPokemon = () => {\n    const howMuchToDownload = 25;\n    let arr: PokesTypes[] = [];\n\n    for (let i = pokemonCount; i <= pokemonCount + howMuchToDownload; i++) {\n      pokemonCount <= 713 && arr.push(pokemonArr[i]);\n    }\n    setPokemon((pokemon: PokesTypes[]) => [...pokemon, ...arr]);\n    setPokemonCount(pokemon.length + 1 + howMuchToDownload);\n  };\n\n  const fallback = (placeholderBase64: string) => {\n    return (\n      <>\n        <img src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <InfiniteScroll\n          dataLength={pokemon.length}\n          next={fetchPokemon}\n          hasMore={pokemonCount <= pokemon.length}\n          loader={<h4>Loading...</h4>}\n          className=\"allPokemonWrapper\"\n          endMessage={<p className=\"pokemon-end\">Don't have more pokemon :(</p>}\n        >\n          {pokemon.map((pokemon: PokesTypes) => (\n            <NavLink to={`/detailedPage/pokemon/${pokemon.name}`} key={pokemon.id}>\n              <Paper elevation={3} className=\"smallPokemonCard\">\n                <div className=\"pokemonLogo\">\n                  <ImageContainer\n                    url={pokemon.imageHQ || pokemon.image}\n                    cn={'pokemonImageCard deBlur'}\n                    fallback={fallback(pokemon.placeholderBase64)}\n                  />\n                </div>\n                <div className=\"pokemonName\">{pokemon?.name}</div>\n              </Paper>\n            </NavLink>\n          ))}\n        </InfiniteScroll>\n      </section>\n    </>\n  );\n};\n\nexport default ListView;\n","import React, { lazy } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport 'react-tippy/dist/tippy.css';\n\nimport { PokesTypes } from 'types/index';\n\nconst ImageContainer = lazy(() => import('components/ImageContainer/ImageContainer'));\n\ntype Props = {\n  pokemonArr: PokesTypes[];\n};\n\nconst CatalogView: React.FC<Props> = ({ pokemonArr = [] }: Props) => {\n  const fallback = (placeholderBase64: string) => {\n    return (\n      <>\n        <img loading=\"lazy\" src={placeholderBase64} className=\"placeholderBase64 deBlur\" alt=\"placeholderBase64\" />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      {pokemonArr.map((index, key) => (\n        <React.Fragment key={key}>\n          <NavLink to={`/detailedPage/pokemon/${index?.name}`} key={key}>\n            <ImageContainer\n              url={index?.image}\n              cn=\"pokemonImageCard deBlur\"\n              fallback={fallback(index?.placeholderBase64)}\n            />\n          </NavLink>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default CatalogView;\n","/* eslint-disable import/no-anonymous-default-export */\nimport React, { useState } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport ListView from './views/ListView';\nimport CatalogView from './views/CatalogView';\n\nimport AppsIcon from '@material-ui/icons/Apps';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\n\nimport { PokesTypes } from 'types/index';\n\nimport './styles/style.scss';\n\nconst PokemonPageAll: React.FC = () => {\n  const pokemonArr = useSelector((state: PokesTypes) => state.pokemonArr);\n\n  const [viewTypeIsCatalog, setViewTypeIsCatalog] = useState<boolean>(false);\n\n  return (\n    <>\n      <div className=\"viewType\">\n        <div className=\"viewTypeInner\">\n          <div className=\"innerBlock\" onClick={() => setViewTypeIsCatalog(!viewTypeIsCatalog)}>\n            <span>{!viewTypeIsCatalog ? 'List view:' : 'Catalog view:'}</span>\n            <span className=\"separator\">|</span>\n            <div className=\"viewTypeIcon\">{!viewTypeIsCatalog ? <BlurOnOutlinedIcon /> : <AppsIcon />}</div>\n          </div>\n        </div>\n      </div>\n\n      {!viewTypeIsCatalog ? <ListView pokemonArr={pokemonArr} /> : <CatalogView pokemonArr={pokemonArr} />}\n    </>\n  );\n};\n\nexport default PokemonPageAll;\n"],"sourceRoot":""}