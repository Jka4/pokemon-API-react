{"version":3,"sources":["components/Search/Search.tsx","components/Player/Player.tsx","components/HeaderLine/HeaderLine.tsx"],"names":["ImageContainer","lazy","fuseOptions","shouldSort","tokenize","matchAllTokens","findAllMatches","includeScore","includeMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","ConnectedSearch","connect","store","pokemonDataArray","pokemonsArr","useState","showResult","setShowResult","searchResult","setSearchResult","debouncedSearchResult","useDebounce","wait","className","type","name","id","placeholder","onChange","event","value","target","result","Fuse","search","slice","onFocus","onBlur","setTimeout","autoComplete","aria-label","map","i","key","to","item","data-id","weight","url","image","cn","fallback","placeholderBase64","src","alt","props","Player","useSound","process","play","stop","isPlaying","Tooltip","title","enterDelay","leaveDelay","arrow","Button","onClick","variant","color","HeaderLine","isMainPage","pathname","HomeIcon","SvgIcon","d","AppBar","position","dispatch"],"mappings":"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","file":"static/js/10.f20dec38.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport React, { lazy, useState } from \"react\";\nimport { Provider, connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport Fuse from \"fuse.js\";\nimport { useDebounce } from \"ahooks\";\n\nimport store from \"Store/store\";\n\nimport \"./styles/style.scss\";\n\nconst ImageContainer = lazy(() => import(\"components/ImageContainer/ImageContainer\"));\n\n\nlet fuseOptions = {\n  shouldSort: true,\n  tokenize: true,\n  matchAllTokens: false,\n  findAllMatches: false,\n  includeScore: true,\n  includeMatches: true,\n  threshold: 0.3,\n  location: 0,\n  distance: 10,\n  maxPatternLength: 20,\n  minMatchCharLength: 2,\n  keys: [\"name\", \"weight\", \"id\"],\n};\n\ntype SearchProps = {\n  pokemonDataArray: Pokes[];\n}\n\ntype Pokes = {\n  id: number;\n  name: string;\n  weight: number;\n  image: string;\n  imageHQ: string;\n  placeholderBase64: string;\n  chain: {\n    species_name: string;\n  }[];\n}\n\nconst Search: React.FC<SearchProps> = ({ pokemonDataArray }: SearchProps) => {\n  const [showResult, setShowResult] = useState<boolean>(false);\n  const [searchResult, setSearchResult] = useState<any[]>([]);\n  const debouncedSearchResult = useDebounce(searchResult, { wait: 300 });\n\n  const handleChange = (event: any) => {\n    const value: string = event.target.value;\n\n    let fuse = new Fuse(pokemonDataArray, fuseOptions);\n    let result = fuse.search(value).slice(0, 11);\n    setSearchResult(result);\n  };\n\n  const handleFocus = () => {\n    setShowResult(true);\n  };\n\n  const handleBlur = () => {\n    setTimeout(() => {\n      setShowResult(false);\n    }, 400);\n  };\n\n\n  const fallback = (placeholderBase64: string) => {\n    return (<>\n      <img src={placeholderBase64} className='placeholderBase64' alt=\"placeholderBase64\" />\n    </>)\n  }\n\n\n  return (\n    <div className=\"search\">\n      <input\n        type=\"search\"\n        name=\"searchInput\"\n        id=\"searchInput\"\n        placeholder=\"Pikachu, 25, 900g\"\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        autoComplete=\"off\"\n        aria-label=\"Search\"\n      />\n\n      <div className=\"searchResults\">\n        {showResult && (\n          <ul className=\"searchList\">\n            {debouncedSearchResult.map((i, key) => (\n              <NavLink\n                key={(i.item.id, key)}\n                to={`/detailedPage/pokemon/${i.item.name}`}\n                className=\"searchItem_outer\"\n              >\n                <li\n                  data-id={i.item.id}\n                  className=\"searchItem\"\n                >\n                  <span className=\"item_name\">NAME: {i.item.name}</span>\n                  <span className=\"item_id\">ID: {i.item.id}</span>\n                  <span className=\"item_weight\">WEIGHT: {i.item.weight}</span>\n                  <ImageContainer url={i.item.image} cn={\"searchItem__image\"} fallback={fallback(i.item.placeholderBase64)} />\n                </li>\n              </NavLink>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ConnectedSearch = connect((store: { pokemonsArr: Pokes[] }) => {\n  return {\n    pokemonDataArray: store.pokemonsArr,\n  };\n})(Search);\n\nexport default (props = {}) => (\n  <Provider store={store}>\n    <ConnectedSearch {...props} />\n  </Provider>\n);\n","import React from \"react\";\nimport useSound from \"use-sound\";\nimport { Button } from \"@material-ui/core\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nimport PauseCircleFilledIcon from \"@material-ui/icons/PauseCircleFilled\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport \"./styles/style.scss\";\n\nconst Player: React.FC = () => {\n  const [play, { stop, isPlaying }] = useSound(\n    `${process.env.PUBLIC_URL}/sound/pokemon_opening.mp3`\n  );\n\n  const playPause = () => {\n    isPlaying ? stop() : play();\n  };\n\n  return (\n    <div className=\"player\">\n      <Tooltip\n        title=\"Pokemon opening song (rus)\"\n        aria-label=\"Pokemon opening song (rus)\"\n        enterDelay={500}\n        leaveDelay={200}\n        arrow\n      >\n        <Button\n          onClick={playPause}\n          className=\"playButton\"\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          {isPlaying ? <PauseCircleFilledIcon /> : <PlayCircleFilledIcon />}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport store from \"Store/store\";\n\nimport Search from \"components/Search/Search\";\nimport Player from \"components/Player/Player\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { Button } from \"@material-ui/core\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\n\nimport \"./styles/style.scss\";\n\ntype HeaderLineProps = {\n  pathname?: string;\n  isMainPage?: any;\n}\n\nconst HeaderLine: React.FC<HeaderLineProps> = ({ pathname }: HeaderLineProps) => {\n  const isMainPage = pathname === \"/\";\n\n  function HomeIcon({ props }: any) {\n    return (\n      <SvgIcon {...props}>\n        <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n      </SvgIcon>\n    );\n  }\n\n  return (\n    <>\n      <AppBar position=\"static\" className=\"topLine\">\n        <div className=\"buttonsRow\">\n          <Player />\n\n          {!isMainPage && (\n            <NavLink\n              to=\"/\"\n              onClick={() => store.dispatch({ type: \"CLEAR_DETAILS_PAGE\" })}\n            >\n              <Button variant=\"contained\" className=\"toHome\" color=\"secondary\">\n                <HomeIcon />\n              </Button>\n            </NavLink>\n          )}\n        </div>\n        <Search />\n      </AppBar>\n    </>\n  );\n};\n\nexport default HeaderLine;\n"],"sourceRoot":""}